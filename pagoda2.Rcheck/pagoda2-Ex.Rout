
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pagoda2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "pagoda2-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('pagoda2')
Loading required package: Matrix
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("pagoda.reduce.loading.redundancy")
> ### * pagoda.reduce.loading.redundancy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pagoda.reduce.loading.redundancy
> ### Title: Collapse aspects driven by the same combinations of genes.
> ###   Examines PC loading vectors underlying the identified aspects and
> ###   clusters aspects based on a product of loading and score correlation
> ###   (raised to corr.power). Clusters of aspects driven by the same genes
> ###   are determined based on the distance.threshold and collapsed.
> ### Aliases: pagoda.reduce.loading.redundancy
> 
> ### ** Examples
> 
> ## No test: 
> ## # Example from scde, <https://www.bioconductor.org/packages/release/bioc/html/scde.html>
> ## data(pollen)  
> ## cd <- clean.counts(pollen)
> ## knn <- knn.error.models(cd, k=ncol(cd)/4, n.cores=10, 
> ##     min.count.threshold=2, min.nonfailed=5, max.model.plots=10)
> ## varinfo <- pagoda.varnorm(knn, counts = cd, trim = 3/ncol(cd), 
> ##     max.adj.var = 5, n.cores = 1, plot = FALSE)
> ## pwpca <- pagoda.pathway.wPCA(varinfo, go.env, n.components=1, 
> ##     n.cores=10, n.internal.shuffles=50)
> ## tam <- pagoda.top.aspects(pwpca, return.table = TRUE, 
> ##     plot=FALSE, z.score=1.96)  # top aspects based on GO only
> ## tamr <- pagoda.reduce.loading.redundancy(tam, pwpca)
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pagoda.reduce.loading.redundancy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pagoda.reduce.redundancy")
> ### * pagoda.reduce.redundancy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pagoda.reduce.redundancy
> ### Title: Collapse aspects driven by similar patterns (i.e. separate the
> ###   same sets of cells) Examines PC loading vectors underlying the
> ###   identified aspects and clusters aspects based on score correlation.
> ###   Clusters of aspects driven by the same patterns are determined based
> ###   on the distance.threshold.
> ### Aliases: pagoda.reduce.redundancy
> 
> ### ** Examples
> 
> ## No test: 
> ## # Example from scde, <https://www.bioconductor.org/packages/release/bioc/html/scde.html>
> ## data(pollen)
> ## cd <- clean.counts(pollen)
> ## knn <- knn.error.models(cd, k=ncol(cd)/4, n.cores=10, min.count.threshold=2, min.nonfailed=5, max.model.plots=10)
> ## varinfo <- pagoda.varnorm(knn, counts = cd, trim = 3/ncol(cd), max.adj.var = 5, n.cores = 1, plot = FALSE)
> ## pwpca <- pagoda.pathway.wPCA(varinfo, go.env, n.components=1, n.cores=10, n.internal.shuffles=50)
> ## tam <- pagoda.top.aspects(pwpca, return.table = TRUE, plot=FALSE, z.score=1.96)  # top aspects based on GO only
> ## tamr <- pagoda.reduce.loading.redundancy(tam, pwpca)
> ## tamr2 <- pagoda.reduce.redundancy(tamr, distance.threshold = 0.9, plot = TRUE, labRow = NA, labCol = NA, box = TRUE, margins = c(0.5, 0.5), trim = 0)
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pagoda.reduce.redundancy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("projectKNNs")
> ### * projectKNNs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: projectKNNs
> ### Title: Project a distance matrix into a lower-dimensional space. (from
> ###   elbamos/largeVis)
> ### Aliases: projectKNNs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(CO2)
> ##D CO2$Plant <- as.integer(CO2$Plant)
> ##D CO2$Type <- as.integer(CO2$Type)
> ##D CO2$Treatment <- as.integer(CO2$Treatment)
> ##D co <- scale(as.matrix(CO2))
> ##D # Very small datasets often produce a warning regarding the alias table.  This is safely ignored.
> ##D suppressWarnings(vis <- largeVis(t(co), K = 20, sgd_batches = 1, threads = 2))
> ##D suppressWarnings(coords <- projectKNNs(vis$wij, threads = 2))
> ##D plot(t(coords))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("projectKNNs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sgdBatches")
> ### * sgdBatches
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sgdBatches
> ### Title: Calculate the default number of batches for a given number of
> ###   vertices and edges. The formula used is the one used by the
> ###   'LargeVis' reference implementation.  This is substantially less than
> ###   the recommendation E * 10000 in the original paper.
> ### Aliases: sgdBatches
> 
> ### ** Examples
> 
> # Observe that increasing K has no effect on processing time
> ## No test: 
> N <- 70000 # MNIST
> K <- 10:250
> plot(K, sgdBatches(rep(N, length(K)), N * K / 2))
> 
> # Observe that processing time scales linarly with N
> N <- c(seq(from = 1, to = 10000, by = 100), seq(from = 10000, to = 10000000, by = 1000))
> plot(N, sgdBatches(N))
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sgdBatches", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("winsorize.matrix")
> ### * winsorize.matrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: winsorize.matrix
> ### Title: Sets the ncol(mat)*trim top outliers in each row to the next
> ###   lowest value same for the lowest outliers
> ### Aliases: winsorize.matrix
> 
> ### ** Examples
> 
> set.seed(0)
> mat <- matrix( c(rnorm(5*10,mean=0,sd=1), rnorm(5*10,mean=5,sd=1)), 10, 10)  # random matrix
> mat[1,1] <- 1000  # make outlier
> range(mat)  # look at range of values
[1]   -1.563782 1000.000000
> win.mat <- winsorize.matrix(mat, 0.1)
> range(win.mat)  # note outliers removed
[1] -1.065591  6.299312
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("winsorize.matrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.153 0.151 2.381 0.004 0.008 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
