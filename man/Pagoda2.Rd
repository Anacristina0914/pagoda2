% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pagoda2.R
\name{Pagoda2}
\alias{Pagoda2}
\title{Pagoda2 R6 class}
\description{
The class encompasses gene count matrices, providing methods for normalization, calculating embeddings, and differential expression.
}
\author{
Simon Steiger
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{counts}}{Gene count matrix, normalized on total counts (default=NULL)}

\item{\code{modelType}}{'plain', 'raw', 'linearObs'}

\item{\code{clusters}}{Results of clustering (default=list())}

\item{\code{graphs}}{Graph representations of the dataset (default=list())}

\item{\code{reductions}}{Results of reductions, e.g. PCA (default=list())}

\item{\code{embeddings}}{Results of visualization algorithms, t-SNE or largeVis (default=list())}

\item{\code{diffgenes}}{Lists of differentially expressed genes (default=list())}

\item{\code{n.cores}}{number of cores (default=1)}

\item{\code{misc}}{list with additional info (default=list())}

\item{\code{batch}}{Batch factor for the dataset (default=NULL)}

\item{\code{genegraphs}}{Slot to store graphical representations in gene space (i.e. gene kNN graphs) (default=list())}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Pagoda2$new()}}
\item \href{#method-setCountMatrix}{\code{Pagoda2$setCountMatrix()}}
\item \href{#method-adjustVariance}{\code{Pagoda2$adjustVariance()}}
\item \href{#method-makeKnnGraph}{\code{Pagoda2$makeKnnGraph()}}
\item \href{#method-getKnnClusters}{\code{Pagoda2$getKnnClusters()}}
\item \href{#method-geneKnnbyPCA}{\code{Pagoda2$geneKnnbyPCA()}}
\item \href{#method-getHierarchicalDiffExpressionAspects}{\code{Pagoda2$getHierarchicalDiffExpressionAspects()}}
\item \href{#method-makeGeneKnnGraph}{\code{Pagoda2$makeGeneKnnGraph()}}
\item \href{#method-getDensityClusters}{\code{Pagoda2$getDensityClusters()}}
\item \href{#method-getDifferentialGenes}{\code{Pagoda2$getDifferentialGenes()}}
\item \href{#method-plotDiffGeneHeatmap}{\code{Pagoda2$plotDiffGeneHeatmap()}}
\item \href{#method-getRefinedLibSizes}{\code{Pagoda2$getRefinedLibSizes()}}
\item \href{#method-plotGeneHeatmap}{\code{Pagoda2$plotGeneHeatmap()}}
\item \href{#method-plotEmbedding}{\code{Pagoda2$plotEmbedding()}}
\item \href{#method-getOdGenes}{\code{Pagoda2$getOdGenes()}}
\item \href{#method-getNormalizedExpressionMatrix}{\code{Pagoda2$getNormalizedExpressionMatrix()}}
\item \href{#method-calculatePcaReduction}{\code{Pagoda2$calculatePcaReduction()}}
\item \href{#method-expandOdGenes}{\code{Pagoda2$expandOdGenes()}}
\item \href{#method-localPcaKnn}{\code{Pagoda2$localPcaKnn()}}
\item \href{#method-testPathwayOverdispersion}{\code{Pagoda2$testPathwayOverdispersion()}}
\item \href{#method-getEmbedding}{\code{Pagoda2$getEmbedding()}}
\item \href{#method-clone}{\code{Pagoda2$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Conos class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$new(
  x,
  ...,
  modelType = "plain",
  n.cores = parallel::detectCores(logical = FALSE),
  verbose = TRUE,
  min.cells.per.gene = 0,
  trim = round(min.cells.per.gene/2),
  min.transcripts.per.cell = 10,
  lib.sizes = NULL,
  log.scale = TRUE,
  keep.genes = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{modelType}}{Plain (default) or raw (expression matrix taken as is without normalization, though log.scale still applies) (default='plain')}

\item{\code{n.cores}}{Number of cores, used for the analyses}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}

\item{\code{min.cells.per.gene}}{integer (default=0)}

\item{\code{trim}}{(default=round(min.cells.per.gene/2))}

\item{\code{min.transcripts.per.cell}}{integer (default=10)}

\item{\code{log.scale}}{boolean (default=TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new 'Pagoda2' object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setCountMatrix"></a>}}
\if{latex}{\out{\hypertarget{method-setCountMatrix}{}}}
\subsection{Method \code{setCountMatrix()}}{
Provide the initial count matrix, and estimate deviance residual matrix (correcting for depth and batch)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$setCountMatrix(
  countMatrix,
  depthScale = 1000,
  min.cells.per.gene = 0,
  trim = round(min.cells.per.gene/2),
  min.transcripts.per.cell = 10,
  lib.sizes = NULL,
  log.scale = FALSE,
  keep.genes = NULL,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{depthScale}}{numeric (defaul=1e3)}

\item{\code{trim}}{(default=round(min.cells.per.gene/2))}

\item{\code{lib.sizes}}{(default=NULL)}

\item{\code{log.scale}}{boolean (default=FALSE)}

\item{\code{keep.genes}}{(default=NULL)}

\item{\code{verbose}}{}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
count matrix
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-adjustVariance"></a>}}
\if{latex}{\out{\hypertarget{method-adjustVariance}{}}}
\subsection{Method \code{adjustVariance()}}{
Adjust variance of the residual matrix, determine overdispersed sites
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$adjustVariance(
  gam.k = 5,
  alpha = 0.05,
  plot = FALSE,
  use.raw.variance = FALSE,
  use.unadjusted.pvals = FALSE,
  do.par = TRUE,
  max.adjusted.variance = 1000,
  min.adjusted.variance = 0.001,
  cells = NULL,
  verbose = TRUE,
  min.gene.cells = 0,
  persist = is.null(cells),
  n.cores = self$n.cores
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gam.k}}{integer (default=5)}

\item{\code{alpha}}{numeric (default=5e-2)}

\item{\code{plot}}{boolean (default=FALSE)}

\item{\code{use.raw.variance}}{(default=FALSE). If modelType=='raw', then this conditional will be used.}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}

\item{\code{n.cores}}{}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-makeKnnGraph"></a>}}
\if{latex}{\out{\hypertarget{method-makeKnnGraph}{}}}
\subsection{Method \code{makeKnnGraph()}}{
Create Knn graph
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$makeKnnGraph(
  k = 30,
  nrand = 1000,
  type = "counts",
  weight.type = "1m",
  odgenes = NULL,
  n.cores = self$n.cores,
  distance = "cosine",
  center = TRUE,
  x = NULL,
  p = NULL,
  var.scale = (type == "counts"),
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{n.cores}}{Number of cores, used for the analyses}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getKnnClusters"></a>}}
\if{latex}{\out{\hypertarget{method-getKnnClusters}{}}}
\subsection{Method \code{getKnnClusters()}}{
Calculate clusters based on the kNN graph
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getKnnClusters(
  type = "counts",
  method = igraph::multilevel.community,
  name = "community",
  subsampling.rate = 0.8,
  n.subsamplings = 10,
  cluster.stability.threshold = 0.95,
  n.cores = self$n.cores,
  g = NULL,
  min.cluster.size = 1,
  persist = TRUE,
  return.details = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{n.cores}}{Number of cores, used for the analyses}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-geneKnnbyPCA"></a>}}
\if{latex}{\out{\hypertarget{method-geneKnnbyPCA}{}}}
\subsection{Method \code{geneKnnbyPCA()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$geneKnnbyPCA()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getHierarchicalDiffExpressionAspects"></a>}}
\if{latex}{\out{\hypertarget{method-getHierarchicalDiffExpressionAspects}{}}}
\subsection{Method \code{getHierarchicalDiffExpressionAspects()}}{
Take a given clustering and generate a hierarchical clustering
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getHierarchicalDiffExpressionAspects(
  type = "counts",
  groups = NULL,
  clusterName = NULL,
  method = "ward.D",
  dist = "pearson",
  persist = TRUE,
  z.threshold = 2,
  n.cores = self$n.cores,
  min.set.size = 5
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{n.cores}}{Number of cores, used for the analyses}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-makeGeneKnnGraph"></a>}}
\if{latex}{\out{\hypertarget{method-makeGeneKnnGraph}{}}}
\subsection{Method \code{makeGeneKnnGraph()}}{
Calculates gene Knn network for gene similarity
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$makeGeneKnnGraph(
  nPcs = 100,
  scale = TRUE,
  center = TRUE,
  fastpath = TRUE,
  maxit = 1000,
  k = 30,
  n.cores = self$n.cores,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nPcs}}{integer (default=100)}

\item{\code{scale}}{boolean (default=TRUE)}

\item{\code{n.cores}}{Number of cores, used for the analyses}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDensityClusters"></a>}}
\if{latex}{\out{\hypertarget{method-getDensityClusters}{}}}
\subsection{Method \code{getDensityClusters()}}{
Calculate density-based clusters
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getDensityClusters(
  type = "counts",
  embeddingType = NULL,
  name = "density",
  v = 0.7,
  s = 1,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDifferentialGenes"></a>}}
\if{latex}{\out{\hypertarget{method-getDifferentialGenes}{}}}
\subsection{Method \code{getDifferentialGenes()}}{
Determine differentially expressed genes, comparing each group against all others using Wilcoxon rank sum test
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getDifferentialGenes(
  type = "counts",
  clusterType = NULL,
  groups = NULL,
  name = "customClustering",
  z.threshold = 3,
  upregulated.only = FALSE,
  verbose = FALSE,
  append.specificity.metrics = TRUE,
  append.auc = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{clusterType}}{Optional cluster type to use as a group-defining factor (default=NULL)}

\item{\code{groups}}{Data type (default='counts'). Currently only 'counts' supported.}

\item{\code{name}}{string Slot to store the results in (default='customClustering')}

\item{\code{z.threshold}}{numeric Minimal absolute Z score (adjusted) to report (default=3)}

\item{\code{upregulated.only}}{boolean Whether to report only genes that are expressed significantly higher in each group (default=FALSE)}

\item{\code{verbose}}{boolean Whether to give verbose output (default=FALSE)}

\item{\code{append.specificity.metrics}}{boolean}

\item{\code{append.auc}}{boolean}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list with each element of the list corresponding to a cell group in the provided/used factor (i.e. factor levels) 
    Each element of a list is a data frame listing the differentially epxressed genes (row names), with the following columns: 
    Z - adjusted Z score, with positive values indicating higher expression in a given group compare to the rest
    M - log2 fold change
    highest- a boolean flag indicating whether the expression of a given gene in a given vcell group was on average higher than in every other cell group
    fe - fraction of cells in a given group having non-zero expression level of a given gene
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plotDiffGeneHeatmap"></a>}}
\if{latex}{\out{\hypertarget{method-plotDiffGeneHeatmap}{}}}
\subsection{Method \code{plotDiffGeneHeatmap()}}{
Plot heatmap of DE results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$plotDiffGeneHeatmap(
  type = "counts",
  clusterType = NULL,
  groups = NULL,
  n.genes = 100,
  z.score = 2,
  gradient.range.quantile = 0.95,
  inner.clustering = FALSE,
  gradientPalette = NULL,
  v = 0.8,
  s = 1,
  box = TRUE,
  drawGroupNames = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{box}}{boolean (default=TRUE)}

\item{\code{drawGroupNames}}{(default=FALSE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRefinedLibSizes"></a>}}
\if{latex}{\out{\hypertarget{method-getRefinedLibSizes}{}}}
\subsection{Method \code{getRefinedLibSizes()}}{
Recalculate library sizes using robust regression within clusters
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getRefinedLibSizes(clusterType = NULL, groups = NULL, type = "counts")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plotGeneHeatmap"></a>}}
\if{latex}{\out{\hypertarget{method-plotGeneHeatmap}{}}}
\subsection{Method \code{plotGeneHeatmap()}}{
Plot heatmap for a given set of genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$plotGeneHeatmap(
  genes,
  type = "counts",
  clusterType = NULL,
  groups = NULL,
  z.score = 2,
  gradient.range.quantile = 0.95,
  cluster.genes = FALSE,
  inner.clustering = FALSE,
  gradientPalette = NULL,
  v = 0.8,
  s = 1,
  box = TRUE,
  drawGroupNames = FALSE,
  useRaster = TRUE,
  smooth.span = max(1, round(nrow(self$counts)/1024)),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plotEmbedding"></a>}}
\if{latex}{\out{\hypertarget{method-plotEmbedding}{}}}
\subsection{Method \code{plotEmbedding()}}{
Show embedding
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$plotEmbedding(
  type = NULL,
  embeddingType = NULL,
  clusterType = NULL,
  groups = NULL,
  colors = NULL,
  gene = NULL,
  plot.theme = ggplot2::theme_bw(),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOdGenes"></a>}}
\if{latex}{\out{\hypertarget{method-getOdGenes}{}}}
\subsection{Method \code{getOdGenes()}}{
Get overdispersed genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getOdGenes(
  n.odgenes = NULL,
  alpha = 0.05,
  use.unadjusted.pvals = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{use.unadjusted.pvals}}{boolean (default=FALSE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getNormalizedExpressionMatrix"></a>}}
\if{latex}{\out{\hypertarget{method-getNormalizedExpressionMatrix}{}}}
\subsection{Method \code{getNormalizedExpressionMatrix()}}{
Return variance-normalized matrix for specified genes or a number of OD genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getNormalizedExpressionMatrix(n.odgenes = NULL, genes = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n.odgenes}}{Whether a certain number of top overdispersed genes should be used (default=NULL - all significant ones); ignored if genes are passed}

\item{\code{genes}}{explicit vector of genes to return (default=NULL)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
cell by gene matrix
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-calculatePcaReduction"></a>}}
\if{latex}{\out{\hypertarget{method-calculatePcaReduction}{}}}
\subsection{Method \code{calculatePcaReduction()}}{
Calculate PCA reduction of the data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$calculatePcaReduction(
  nPcs = 20,
  type = "counts",
  name = "PCA",
  use.odgenes = TRUE,
  n.odgenes = NULL,
  odgenes = NULL,
  center = TRUE,
  cells = NULL,
  fastpath = TRUE,
  maxit = 100,
  verbose = TRUE,
  var.scale = (type == "counts"),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nPcs}}{Number of PCs (default=20)}

\item{\code{type}}{Dataset view to reduce (counts by default, but can specify a name of an existing reduction) (default='counts')}

\item{\code{name}}{Name for the PCA reduction to be created (default='PCA')}

\item{\code{use.odgenes}}{boolean Whether pre-calculated set of overdispersed genes should be used (default=TRUE)}

\item{\code{n.odgenes}}{Whether a certain number of top overdispersed genes should be used (default=NULL)}

\item{\code{odgenes}}{Explicitly specify a set of genes to use for the reduction (default=NULL)}

\item{\code{center}}{boolean Whether data should be centered prior to PCA (default=TRUE)}

\item{\code{cells}}{optional subset of cells on which PCA should be run (default=NULL)}

\item{\code{fastpath}}{boolean Use C implementation for speedup (default=TRUE)}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}

\item{\code{...}}{additional arguments forwarded to irlba::irlba}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible PCA result (the reduction itself is saved in self$reductions[[name]])"
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expandOdGenes"></a>}}
\if{latex}{\out{\hypertarget{method-expandOdGenes}{}}}
\subsection{Method \code{expandOdGenes()}}{
Reset odgenes to be a superset of the standard odgene selection (guided by n.odgenes or alpha), 
    and a set of recursively determined odgenes based on a given group (or a cluster info)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$expandOdGenes(
  type = "counts",
  clusterType = NULL,
  groups = NULL,
  min.group.size = 30,
  od.alpha = 0.1,
  use.odgenes = FALSE,
  n.odgenes = NULL,
  odgenes = NULL,
  n.odgene.multiplier = 1,
  gam.k = 10,
  verbose = FALSE,
  n.cores = self$n.cores,
  min.odgenes = 10,
  max.odgenes = Inf,
  take.top.odgenes = TRUE,
  recursive = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{clusterType}}{(default=NULL)}

\item{\code{groups}}{(default=NULL)}

\item{\code{min.group.size}}{integer (default=30)}

\item{\code{od.alpha}}{numeric (default=1e-1)}

\item{\code{use.odgenes}}{boolean (default=FALSE)}

\item{\code{n.odgenes}}{(default=NULL)}

\item{\code{odgenes}}{(default=NULL)}

\item{\code{n.odgene.multiplier}}{numeric (default=1)}

\item{\code{gam.k}}{integer (default=10)}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}

\item{\code{n.cores}}{Number of cores, used for the analyses}

\item{\code{min.odgenes}}{integer (default=10)}

\item{\code{max.odgenes}}{integer (default=Inf)}

\item{\code{take.top.odgenes}}{boolean (default=TRUE)}

\item{\code{recursive}}{boolean (default=TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-localPcaKnn"></a>}}
\if{latex}{\out{\hypertarget{method-localPcaKnn}{}}}
\subsection{Method \code{localPcaKnn()}}{
localPcaKnn description
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$localPcaKnn(
  nPcs = 5,
  type = "counts",
  clusterType = NULL,
  groups = NULL,
  k = 30,
  b = 1,
  a = 1,
  min.group.size = 30,
  name = "localPCA",
  baseReduction = "PCA",
  od.alpha = 0.1,
  n.odgenes = NULL,
  gam.k = 10,
  verbose = FALSE,
  n.cores = self$n.cores,
  min.odgenes = 5,
  take.top.odgenes = FALSE,
  recursive = TRUE,
  euclidean = FALSE,
  perplexity = k,
  return.pca = FALSE,
  skip.pca = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}

\item{\code{n.cores}}{Number of cores, used for the analyses}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-testPathwayOverdispersion"></a>}}
\if{latex}{\out{\hypertarget{method-testPathwayOverdispersion}{}}}
\subsection{Method \code{testPathwayOverdispersion()}}{
Test pathway overdispersion. Not that this is a compressed version of the PAGODA1 approach.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$testPathwayOverdispersion(
  setenv,
  type = "counts",
  max.pathway.size = 1000,
  min.pathway.size = 10,
  n.randomizations = 5,
  verbose = FALSE,
  score.alpha = 0.05,
  plot = FALSE,
  cells = NULL,
  adjusted.pvalues = TRUE,
  z.score = qnorm(0.05/2, lower.tail = FALSE),
  use.oe.scale = FALSE,
  return.table = FALSE,
  name = "pathwayPCA",
  correlation.distance.threshold = 0.2,
  loading.distance.threshold = 0.01,
  top.aspects = Inf,
  recalculate.pca = FALSE,
  save.pca = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{verbose}}{boolean Whether to give verbose output (default=TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getEmbedding"></a>}}
\if{latex}{\out{\hypertarget{method-getEmbedding}{}}}
\subsection{Method \code{getEmbedding()}}{
Return embedding
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$getEmbedding(
  type = "counts",
  embeddingType = "largeVis",
  name = NULL,
  dims = 2,
  M = 1,
  gamma = 1/M,
  perplexity = 50,
  verbose = TRUE,
  sgd_batches = NULL,
  diffusion.steps = 0,
  diffusion.power = 0.5,
  distance = "pearson",
  n.cores = self$n.cores,
  n.sgd.cores = n.cores,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{string Data type (default='counts'). Currenlty only 'counts' supported.}

\item{\code{embeddingType}}{'largeVis', 'tSNE', 'FR', 'UMAP', 'UMAP_graph' (default)}

\item{\code{verbose}}{boolean (default=TRUE)}

\item{\code{n.cores}}{Number of cores, used for the analyses}

\item{\code{...}}{}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Pagoda2$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
